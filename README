// ------------------------------------------------------------
//  Trabalho Estrutura de Dados II
//		Ciênia da Computação
//
// Aluno: Marlon da Silva Dias
// GitHub: https://github.com/marlonsd/EDII-Graph
// README
// ------------------------------------------------------------

1. Introdução
	O trabalho consiste na implementação de Grafo. Este é um
trabalho desenvolvido para a disciplina de Estrutura da dados do curso
de Ciência da Computação da Universidade Federal de Pelotas.

#######################################################################

2. Como foi programado e como executar
	O trabalho foi desenvolvido em Python, utilizando Python 2.7.2+.
Para executar o programa basta inserir, no terminal:
						$ python main.py
A entrada padrão do programa é o terminal, porém, pode ser desviada:
				$ python main.py < NOME_ARQUIVO		
O mesmo é válido para saída, porém, no lugar de "<" utiliza-se ">".

#######################################################################

3. Especificações do programa
	O trabalho foi desenvolvido seguindo a especificação do mesmo no
moodle da disciplina:
	http://avainstitucional.ufpel.edu.br/mod/assignment/view.php?id=25409

	O trabalho foi implementado com uma Matriz de Adjacência.

	A entrada do programa segue uma ordem:

					*Vertices NRO
					 -- Operações --
					*Edges / *Arcs
					-- Operações --
					*Queries
					-- Operações --
					@

	A entrada deve seguir esta ordem e utilizar o '@' para finalizar a
execução. Caso contenha alguma entrada inesperada, o programa aborta.
Caso a ordem seja invertida (exemplo, Queries antes de Vertices ou
Edges), acarreta em um possível mal funcionamento do grafo, visto que
o grafo pode não ter sido inicializado/criado ainda.

	Obs: Quanto as saídas de cada função, foram copiadas exatamento
como são apresentadas no especificação do moodle, incluindo espaçamento
entre palavaras. Os exemplos contigos neste arquivo, em sua grande parte,
são copiados de lá também, tal como estão.
-----------------------------------------------------------------------

	3.1 Vertices

	Logo após da entrada "*Vertices" deve ser seguida de um número, que
irá definir quantos vértices existirão no grafo. Este número deve ser um
número Natural, e preferencialmente maior que zero.

	Na linha seguinte, deve vir a inicialização de cada vértice:

					*Vertices NRO
					ÍNDICE_VÉRTICE "NOME DO VÉRTICE"

	ÍNDICE_VÉRTICE também deve ser um número, tal que:
					0 < ÍNDICE_VÉRTICE < NRO

	Caso o número informado a ÍNDICE_VÉRTICE não respeite a condição
acima o vértice não será criado, e nenhuma mensagem será retornada.

	Exemplo funcional de Vertice:

					*Vertices 3
					1 "Fulano de Tal"
					0 "Ciclano"
					2 "Beltrano"

	Logicamente, o número de vértices a serem definidos é o mesmo
definido por NRO (se NRO = 3, 3 definições, como no exemplo acima),
porém, caso seja definido mais de uma vez o mesmo vértices, será válido
a última definição. Exemplo:

					*Vertices 3
					1 "Fulano de Tal"
					0 "Ciclano"
					2 "Beltrano"
					1 "Beltrano"

	No final, o vértice 1 estará definido como "Beltrano".

	É esperado que sejam criados NRO vértices (de 0 até NRO - 1). Visto
que, não é possível definir um novo vértice fora desta área. Portanto,
se é previsto que um vértice não vai ser criado, deve-se ser informado
um valor menor a NRO.

	Portanto, o algoritmo irá interpretar como o fim da inicialização
dos vértices quando encontrar o começo da definição das arestas
(*Edges ou *Arcs).
-----------------------------------------------------------------------

	3.2 Edges / Arcs

	Na linha seguinte a "*Edges" ou "*Arcs" deve vir a inicialização de
cada aresta:

					*Edges NRO
					ID1 ID2 PESO

					*Arcs NRO
					ID1 ID2 PESO

	Edges ou Arcs representam as arestas do grafo. Edges é referente à
arestas não-direcionadas; Arcs à direcionadas.
	Dentro do grafo, todas as arestas são direcionadas, mas, ao se usar
Edges é criado uma aresta com origem em ID1 e destino ID2 e outra com
origem em ID2 e destino ID1. Enquanto Arcs cria uma aresta com origem
em ID1 e destino ID2.

	O PESO deve ser um valor Natural.

	Não há um limite para o número de arestas a serem criadas, será
interpretado o fim da criação de vértices quando for encontrado o comando
das operações (*Queries) . Porém há um número máximo de arestas possíveis
de se existir dentro de um grafo dado seu número de vértices. Caso exceda
esse número, significa que tem aresta repetida. Caso exista aresta
repetida, será válido (o peso) da última aresta.
-----------------------------------------------------------------------

	3.3 Queries

	Seguido a este comando, deve vir a lista de operações a serem
realizadas no grafo.

					*Queries
					OPERACAO <PARAMETRO 1> <PARAMETRO 2>

	São possíveis as seguintes operações: get, delete, vizinhos,
conexão, ordem topológica, árvore mínima e  menor caminho. Os parâmetros
dependem de casa operação.

	Não há um limite de operações a serem realizadas, como está é a
última possibilidade de se trabalhar no grafo, irá ser interpretado o 
fim das operações quando for encontrado o símbolo defindo para parar a
execução do programa ('@'). Caso alguma operação que não as previamente
estabelecidas seja informada o programa irá abortar. O mesmo vale se
tentar executar uma das previamente estabelecidas mas com um diferente
nome.
***********************************************************************

		3.3.1 Get

	Operação get é definda por:
					*Queries
					get VERTICE

	A qual a finalidade é acessar VERTICE e trazer as informações nele
presente. Como resposta é obtido:

	{"vertice":{"ID":INDICE, "dado":DADO, "resposta":"RESPOSTA"}}

	Onde INDICE é o índice do vértice que se procura (INDICE = VERTICE).
DADO é a informação contida no vértice, caso o vértice não exista essa
opção permace em branco. E RESPOSTA é referente a tentativa de acessar
o vértice, sucesso em caso positivo e falha em caso negativo. Exemplo
de saídas:

	{"vertice":{"ID":1, "dado":"Fulano de Tal", "resposta":"sucesso"}}
	{"vertice":{"ID":1, "dado":"", "resposta":"falha"}}
***********************************************************************
		3.3.2 Delete

	Operação delete é definida por:
					*Queries
					delete VERTICE

	A qual a finalidade é deletar o vértice VERTICE. Como resposta é
obtido:

	{"delete":{"ID":INDICE,"resposta":"RESPOSTA"}}

	Onde INDICE é o índice do vértice que se procura (INDICE = VERTICE).
E RESPOSTA é referente a tentativa de deletar o vértice, sucesso em caso
positivo e falha em caso negativo. Exemplo de saídas:

			{"delete":{"ID":15,"resposta":"sucesso"}}
			{"delete":{"ID":15,"resposta":"falha"}}

	Ao deletar um vértice todos os seguintes são "puxados" uma posição.

	Por exemplo, tem-se 15 vértices (todos corretamente criados),
numerados, então, de 0 a 14. Deseja-se deletar o vértice 13. Então:

					*Queries
					delete 13

	Retornará a mensagem:
			{"delete":{"ID":13,"resposta":"sucesso"}}

	A partir de então, o vértice não existe mais bem como todas as
arestas que dele saiam ou chegavam. E, além disso, o vértice que antes
era o número 14 passa a ser o número 13, mantendo todas as suas
características anteriores, porém, com um índice novo agora.
***********************************************************************
		
		3.3.3 Vizinhos

		Operação vizinhos é definida por:
					*Queries
					vizinhos VERTICE

		Retorna uma lista de vizinhos do vértice VERTICE. No caso do
grafo ser direcionado, os vizinhos são aqueles apontados pelo vértice.
Caso o vértice não exista ou ele não possua vizinhos é retornado uma 
mensagem de falha. Exemplos:

	{"vizinhos":{"ID":1, "resposta":"sucesso", "vizinhos":[0,2,1]}}
	{"vizinhos":{"ID":1, "resposta":"falha", "vizinhos":[]}}
***********************************************************************

		3.3.4 Conexão

	Operação vizinhos é definida por:
					*Queries
					conexao ID1 ID2

	Informa se existe uma conexão entre os vértices ID1 e ID2. No caso
de grafo direcionados, verifica uma aresta que saia de ID1 e chege em
ID2. Falha se ID1 ou ID2 não existirem ou a conexão não existir.
Exemplos de retorno:

	{"conexao":{"ID1":0, "ID2":1, "resposta":"sucesso", "conexao":"sim"}}
	{"conexao":{"ID1":0, "ID2":1, "resposta":"falha", "conexao":""}}
***********************************************************************

		3.3.5 Ordem Topológica

	Operação ordem topológica é definida por:
					*Queries
					ordemtopologica

	Retorna uma lista de vértices em ordem topológica. Vértices na mesma
posição na ordem devem ser listados em ordem crescente de ID. Opera em
grafos que são possíveis de gerar uma Ordem Topológica, grafos direcionados,
conectados e sem ciclos. Caso seja informado um grafo que não respeite
essas características, a resposta pode não ser a esperada. 
Exemplo de retorno:

	{"ordemtop":[1,2,3,4,6,8,5,7]}
	{"ordemtop":[]} // Possível retorno em momento de erro
***********************************************************************

		3.3.6 Árvore Mínima

	Operação árvore mínima é definida por:
					*Queries
					arvoreminima
	Retotorna uma lista de arestas que compõem a árvore mínima do grafo
(saída do algoritmo de Kruskal), bem como o custo da árvore. Opera
apenas em grafos não-direcionados e conectados. Caso seja informado um
grafo que não respeite essas características, a resposta pode não ser a
esperada. Exemplo de retorno:

	{"arvoreminima":{"arestas":[(3,4),(1,2),(0,1),(2,3)], "custo":18}}
***********************************************************************

		3.3.7 Menor Caminho

	Operação menor caminho é definida por:
					*Queries
					menorcaminho ID1 ID2 

	Retorna uma lista de vértices que compõe o menor caminho entre ID1
e ID2 (incluindo estes), além do custo desse caminho. O caminho deve ser
vazio ([]) se não houver caminho. Opera apenas em grafos conectados.
Caso seja informado um grafo que não respeite essas características, a
resposta pode não ser a esperada. Exemplo de retorno:

{"menorcaminho":{"ID":0, "ID2":7, "caminho":"[0,1,5,2,7]","custo":"60"}}
***********************************************************************

-----------------------------------------------------------------------

#######################################################################

4. Considerações Finais
	
	O trabalho respeita as especificações informadas no moodle da
disciplina, tanto suas funcionalidades quanto suas saídas. Foi pedido 
para retornar strings em formato JSON, porém, foi-se utilizado o mesmo
modelo em que se encontra na especificação.

	Não foi utilizado os métodos para conversão JSON automática da
biblioteca Python, pois este estava gerando uma saída um pouco diferente
com a informada na especificação, portanto, está sendo gerada de forma
manual a saída

	Não foram feitos testes de estresse no programa.

#######################################################################